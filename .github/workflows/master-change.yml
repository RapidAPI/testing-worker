name: Release package and upload zip to lambdas in production

on:
  push:
    branches:
      - master

jobs:
  node-run-tests:
    name: Run tests and create zip artifact
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "v14.15.4"
      - run: yarn install --frozen-lockfile
      - run: yarn jest
      - run: yarn check-format
      - run: yarn lint
      # Build lambda zip
      - uses: ./.github/actions/build-zip
        with: 
          ACTIONS_ACCESS_KEY: ${{ secrets.ACTIONS_ACCESS_KEY }}
  
  lambda-upload-zip-to-aws:
    needs: [node-run-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        region: [
          us-east-1, 
          us-west-2,
          ap-east-1,
          ap-south-1, 
          ap-southeast-1, 
          ap-northeast-1, 
          eu-central-1, 
          eu-west-3, 
          sa-east-1
        ]
        location_key: [
          AWS-US-EAST-1,
          AWS-US-WEST-2,
          AWS-AP-EAST-1,
          AWS-AP-SOUTH-1,
          AWS-AP-SOUTHEAST-1,
          AWS-AP-NORTHEAST-1,
          AWS-EU-CENTRAL-1,
          AWS-EU-WEST-3,
          AWS-SA-EAST-1
        ]
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/upload-lambda
        with: 
          ACTIONS_ACCESS_KEY: ${{ secrets.ACTIONS_ACCESS_KEY }}
          worker_env: >
            BASE_URL=https://rapidapi.com/testing,
            LOCATION_CONTEXT=Default,
            LOCATION_KEY=${{ matrix.location_key }},
            LOCATION_SECRET=${{ secrets.LOCATION_SECRET_PROD_DEFAULT }},
            WORKER_LOGGING=off
          aws_access_key_id: ${{ secrets.AWS_PROD_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_PROD_SECRET_ACCESS_KEY }}
          aws_region: ${{ matrix.region }}
          function_name: rapidapi-prod-testing-worker

  npm-publish-package:
    if: "contains(github.event.head_commit.message, 'ci-publish-package')"
    needs: [node-run-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "v14.15.4"
      - uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.NPM_TOKEN_NPM }}
          registry: https://registry.npmjs.org/
      - uses: JS-DevTools/npm-publish@v1
        with:
          token: ${{ secrets.ACTIONS_ACCESS_KEY }}
          registry: https://npm.pkg.github.com

  make-release:
    if: "contains(github.event.head_commit.message, 'ci-publish-package')"
    needs: [npm-publish-package]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "v14.15.4"
      - run: yarn install --frozen-lockfile
      - name: Get version number
        uses: ./.github/actions/get-version
        id: get_package_version
      - name: Create a Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: release-v${{ steps.get_package_version.outputs.package_version }}
          release_name: Release v${{ steps.get_package_version.outputs.package_version }}
          body: This release was generated for commit ${{ github.sha }}
          draft: false
          prerelease: false

  docker-build-push-worker:
    if: "contains(github.event.head_commit.message, 'ci-publish-package')"
    needs: [node-run-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile.worker
          push: true
          tags: rapidapicloud/testing-worker:latest
  